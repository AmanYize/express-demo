name: Build, Test, and Deploy Node.js Express Demo

on:
  push:
    branches: [master]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: npm test

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      - name: Build app
        run: npm run build || true

      - name: Trust self-signed cert
        run: |
          echo "${{ secrets.REGISTRY_CA }}" | base64 -d > ca.crt
          sudo mkdir -p /etc/docker/certs.d/37.27.196.138:443
          sudo cp ca.crt /etc/docker/certs.d/37.27.196.138:443/ca.crt
          sudo systemctl restart docker

      - name: Log in to private Docker registry
        run: echo "${{ secrets.REGISTRY_PASSWORD }}" | docker login 37.27.196.138:5000 -u ${{ secrets.REGISTRY_USER }} --password-stdin

      - name: Build Docker image
        run: |
          docker build -t 37.27.196.138:5000/myapp:${{ github.sha }} .

      - name: Push Docker image
        run: |
          docker push 37.27.196.138:5000/myapp:${{ github.sha }}

      - name: SSH to VPS and deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          password: ${{ secrets.VPS_PASSWORD }}
          script: |
            export APP_VERSION=${{ github.sha }}
            export APP_PORT=${{ secrets.APP_PORT }}
            export POSTGRES_VERSION=${{ secrets.POSTGRES_VERSION }}
            export POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}

            echo "Deploying version $APP_VERSION..."

            cat << EOF > /root/docker-compose.yml
            version: '3.8'
            services:
              app:
                image: 37.27.196.138:5000/myapp:\${APP_VERSION}
                ports:
                  - "\${APP_PORT}:3000"
                environment:
                  - POSTGRES_PASSWORD=\${POSTGRES_PASSWORD}
                depends_on:
                  - postgres
                restart: always
                healthcheck:
                  test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
                  interval: 30s
                  timeout: 5s

              postgres:
                image: postgres:\${POSTGRES_VERSION}
                environment:
                  - POSTGRES_DB=mydb
                  - POSTGRES_PASSWORD=\${POSTGRES_PASSWORD}
                ports:
                  - "5433:5432"
                volumes:
                  - postgres_data:/var/lib/postgresql/data
                restart: always

            volumes:
              postgres_data:
            EOF

            docker compose -f /root/docker-compose.yml down || true
            docker compose -f /root/docker-compose.yml pull
            docker compose -f /root/docker-compose.yml up -d

            docker images 37.27.196.138:5000/myapp --format '{{.Tag}}' | sort -r | tail -n +6 | xargs -r -I {} docker rmi 37.27.196.138:5000/myapp:{}
