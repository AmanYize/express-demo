name: Build, Test, and Deploy Node.js Express Demo

on:
  push:
    branches:
      - master

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: '18'

      - run: npm install

      - run: chmod +x ./node_modules/.bin/mocha

      - run: npm test

      - if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: test-results/*.xml

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: '18'

      - run: npm install

      - run: npm run build || true

      - uses: docker/setup-buildx-action@v2

      - name: Push to Local Insecure Docker Registry
        env:
          REGISTRY_HOST: 37.27.196.138:5000
        run: |
          mkdir -p ~/.docker
          echo '{ "insecure-registries": ["'"$REGISTRY_HOST"'"] }' > ~/.docker/daemon.json
          echo '{ "auths": {}, "HttpHeaders": { "User-Agent": "Docker-Client/20.10.7 (linux)" } }' > ~/.docker/config.json

          docker buildx build \
            --platform linux/amd64 \
            --build-arg NODE_VERSION=${{ secrets.NODE_VERSION }} \
            -t $REGISTRY_HOST/myapp:${{ github.sha }} \
            --push .

      - name: SSH into VPS and deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          password: ${{ secrets.VPS_PASSWORD }}
          script: |
            export APP_VERSION=${{ github.sha }}
            export APP_PORT=${{ secrets.APP_PORT }}
            export POSTGRES_VERSION=${{ secrets.POSTGRES_VERSION }}
            export POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            export REGISTRY_HOST=37.27.196.138:5000

            echo '{ "insecure-registries": ["'$REGISTRY_HOST'"] }' | sudo tee /etc/docker/daemon.json
            sudo systemctl restart docker
            sleep 10

            cat << EOF > /root/docker-compose.yml
            version: '3.8'
            services:
              app:
                image: ${REGISTRY_HOST}/myapp:\${APP_VERSION}
                ports:
                  - "\${APP_PORT}:3000"
                environment:
                  - POSTGRES_PASSWORD=\${POSTGRES_PASSWORD}
                depends_on:
                  - postgres
                restart: always
                healthcheck:
                  test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
                  interval: 30s
                  timeout: 3s
              postgres:
                image: postgres:\${POSTGRES_VERSION}
                environment:
                  - POSTGRES_DB=mydb
                  - POSTGRES_PASSWORD=\${POSTGRES_PASSWORD}
                ports:
                  - "5433:5432"
                restart: always
                volumes:
                  - postgres_data:/var/lib/postgresql/data
            volumes:
              postgres_data:
            EOF

            docker pull ${REGISTRY_HOST}/myapp:$APP_VERSION || exit 1
            docker compose -f /root/docker-compose.yml down || true
            docker compose -f /root/docker-compose.yml up -d || exit 1

            docker images ${REGISTRY_HOST}/myapp --format '{{.Tag}}' | sort -r | tail -n +6 | xargs -I {} docker rmi ${REGISTRY_HOST}/myapp:{} || true

            echo "$APP_VERSION" > /root/previous_version.txt
