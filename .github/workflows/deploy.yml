name: Build, Test, and Deploy Node.js Express Demo

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      - name: Fix mocha permissions
        run: chmod +x ./node_modules/.bin/mocha

      - name: Run tests
        run: npm test

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: test-results/*.xml

  deploy-registry:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    steps:
      - name: SSH into VPS and deploy registry
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          password: ${{ secrets.VPS_PASSWORD }}
          script: |
            echo "--- Starting Registry Deployment Setup ---"
            sudo apt update && sudo apt install -y curl git docker.io docker-compose net-tools lsof || true

            sudo systemctl enable docker
            sudo systemctl start docker

            echo '{"insecure-registries": ["37.27.196.138:5000"]}' | sudo tee /etc/docker/daemon.json
            sudo systemctl restart docker
            echo "Docker daemon configured for insecure registry and restarted."

            REGISTRY_DIR="/root/registry"
            REGISTRY_COMPOSE_FILE="$REGISTRY_DIR/docker-compose.yml"
            REGISTRY_AUTH_DIR="$REGISTRY_DIR/auth"
            REGISTRY_IP="37.27.196.138"

            mkdir -p "$REGISTRY_AUTH_DIR"

            cat << EOF > "$REGISTRY_COMPOSE_FILE"
            version: '3.8'
            services:
              registry:
                image: registry:2
                container_name: registry-registry-1
                ports:
                  - "5000:5000"
                environment:
                  - REGISTRY_HTTP_ADDR=0.0.0.0:5000
                  - REGISTRY_AUTH=htpasswd
                  - REGISTRY_AUTH_HTPASSWD_REALM=Registry Realm
                  - REGISTRY_AUTH_HTPASSWD_PATH=/auth/htpasswd
                volumes:
                  - registry-data:/var/lib/registry
                  - $REGISTRY_AUTH_DIR:/auth
                restart: always
            volumes:
              registry-data:
            EOF
            echo "Registry docker-compose.yml created."

            # Create htpasswd file and verify
            echo "Creating htpasswd file..."
            docker run --rm --entrypoint htpasswd httpd:2 -Bbn "${{ secrets.DOCKER_USERNAME }}" "${{ secrets.DOCKER_PASSWORD }}" > "$REGISTRY_AUTH_DIR/htpasswd" || { echo "Failed to create htpasswd file!"; exit 1; }
            if [ -s "$REGISTRY_AUTH_DIR/htpasswd" ]; then
                echo "htpasswd file created successfully."
                cat "$REGISTRY_AUTH_DIR/htpasswd"
            else
                echo "ERROR: htpasswd file is empty or not created!" >&2
                exit 1
            fi

            # Stop and remove previous registry containers
            docker compose -f "$REGISTRY_COMPOSE_FILE" down --timeout 0 --rmi all --volumes --remove-orphans || true
            echo "Previous registry containers stopped and removed."

            # Start registry with retries
            echo "Starting registry..."
            for attempt in {1..5}; do
              docker compose -f "$REGISTRY_COMPOSE_FILE" up -d
              sleep 10
              if docker ps --filter "name=registry-registry-1" --filter "status=running" | grep -q "registry-registry-1"; then
                echo "Registry container is running."
                break
              else
                echo "Registry container not running after attempt $attempt. Checking logs..." >&2
                docker logs registry-registry-1 || true
              fi
              echo "Registry start attempt $attempt failed, retrying..." >&2
            done || { echo "Registry failed to start after multiple attempts!" >&2
                      echo "Current docker ps -a output:" >&2
                      docker ps -a >&2
                      exit 1; }

            # Verify registry health with retries
            echo "Verifying registry health..."
            for attempt in {1..5}; do
              if curl -s -u "${{ secrets.DOCKER_USERNAME }}:${{ secrets.DOCKER_PASSWORD }}" http://localhost:5000/v2/ | grep -q '{}'; then
                echo "Registry health check passed."
                break
              else
                echo "Registry health check failed on attempt $attempt. Checking logs..." >&2
                docker logs registry-registry-1 || true
                sleep 10
              fi
            done || { echo "Registry failed health check after multiple attempts!" >&2
                      echo "Current docker ps -a output:" >&2
                      docker ps -a >&2
                      echo "Checking port 5000:" >&2
                      sudo netstat -tulnp | grep ":5000\b" >&2
                      sudo lsof -i :5000 >&2
                      exit 1; }

            # Test registry login
            echo "Testing Docker login to registry..."
            for attempt in {1..5}; do
              if echo "${{ secrets.DOCKER_PASSWORD }}" | docker login 37.27.196.138:5000 -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin; then
                echo "Docker login to registry succeeded."
                break
              else
                echo "Docker login failed on attempt $attempt. Checking registry logs..." >&2
                docker logs registry-registry-1 || true
                sleep 10
              fi
            done || { echo "Docker login to registry failed after multiple attempts!" >&2
                      echo "Current docker ps -a output:" >&2
                      docker ps -a >&2
                      exit 1; }

            sudo ufw allow 5000
            echo "Firewall configured to allow port 5000."
            echo "--- Registry Deployment Complete ---"

  build-and-deploy:
    needs: deploy-registry
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: SSH into VPS, Build, and Deploy application
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          password: ${{ secrets.VPS_PASSWORD }}
          script: |
            echo "--- Starting Application Deployment on VPS ---"
            APP_DIR="/root/express-demo"
            PROJECT_NAME="express-demo"
            LOCAL_REGISTRY_IMAGE="37.27.196.138:5000/myapp"
            APP_BUILD_TAG="${{ github.sha }}"
            APP_PORT=${{ secrets.APP_PORT }}

            sudo apt update && sudo apt install -y net-tools lsof || true

            # 1. Diagnostic: Check initial state
            echo "Checking initial state of containers and ports..."
            docker ps -a
            sudo netstat -tulnp | grep -E ":($APP_PORT|5433|5000)\b" || true
            sudo lsof -i :$APP_PORT -i :5433 -i :5000 || true

            # 2. Verify registry is running
            echo "Verifying registry container..."
            if ! docker ps --filter "name=registry-registry-1" --filter "status=running" | grep -q "registry-registry-1"; then
              echo "Registry container not running, attempting to restart..."
              cd /root/registry
              docker compose -f docker-compose.yml up -d || { echo "Failed to restart registry!" >&2; exit 1; }
              sleep 10
              if ! docker ps --filter "name=registry-registry-1" --filter "status=running" | grep -q "registry-registry-1"; then
                echo "Registry container failed to start!" >&2
                docker logs registry-registry-1 >&2
                docker ps -a >&2
                exit 1
              fi
            fi
            echo "Registry container is running."

            # 3. Aggressive Cleanup (exclude registry)
            echo "--- Starting Aggressive Application Cleanup ---"
            cd /root

            # Stop and remove all Docker Compose projects
            if [ -d "$APP_DIR" ] && [ -f "$APP_DIR/docker-compose.yml" ]; then
                cd "$APP_DIR"
                docker compose -p "$PROJECT_NAME" -f docker-compose.yml down --timeout 0 --rmi all --volumes --remove-orphans || true
                cd /root
            else
                echo "App directory or docker-compose.yml not found, skipping docker compose down."
            fi

            # Stop and remove containers except registry
            echo "Force stopping and removing containers except registry..."
            docker ps -a -q --filter "ancestor=${LOCAL_REGISTRY_IMAGE}" | xargs -r docker stop || true
            docker ps -a -q --filter "ancestor=${LOCAL_REGISTRY_IMAGE}" | xargs -r docker rm -f || true
            docker ps -a -q --filter "ancestor=postgres" | xargs -r docker stop || true
            docker ps -a -q --filter "ancestor=postgres" | xargs -r docker rm -f || true
            docker ps -a -q --filter "port=$APP_PORT" | xargs -r docker stop || true
            docker ps -a -q --filter "port=$APP_PORT" | xargs -r docker rm -f || true
            docker ps -a -q --filter "port=5433" | xargs -r docker stop || true
            docker ps -a -q --filter "port=5433" | xargs -r docker rm -f || true
            # Exclude registry container
            docker ps -a -q --filter "name=^registry-registry-1$" --filter "status=exited" | xargs -r docker rm -f || true

            # Prune unused Docker resources (images, volumes, networks)
            echo "Pruning unused Docker system resources..."
            sudo docker system prune -a -f --volumes || true
            sudo docker network prune -f || true

            # 4. Advanced Port Cleanup Loop
            echo "--- Starting Advanced Port Cleanup for ports $APP_PORT and 5433 ---"
            PORT_CLEANUP_ATTEMPTS=0
            MAX_PORT_CLEANUP_ATTEMPTS=20
            PORT_CHECK_INTERVAL=5

            while [ "$PORT_CLEANUP_ATTEMPTS" -lt "$MAX_PORT_CLEANUP_ATTEMPTS" ]; do
                echo "Attempt $((PORT_CLEANUP_ATTEMPTS + 1)) of $MAX_PORT_CLEANUP_ATTEMPTS: Checking ports $APP_PORT and 5433."
                
                echo "Current docker ps -a output:"
                docker ps -a
                
                echo "Processes from ss:"
                sudo ss -tulpn | grep -E ":($APP_PORT|5433)\b" || true
                
                echo "Processes from lsof:"
                sudo lsof -i :$APP_PORT -i :5433 || true
                
                ACTIVE_PIDS_SS=$(sudo ss -tulpn | grep -E ":($APP_PORT|5433)\b" | grep -oP 'pid=\K\d+' | xargs || true)
                ACTIVE_PIDS_LSOF=$(sudo lsof -t -i :$APP_PORT -i :5433 | grep -v "^$" | xargs || true)
                ALL_PIDS=$(echo "$ACTIVE_PIDS_SS $ACTIVE_PIDS_LSOF" | tr ' ' '\n' | grep -E '^[0-9]+$' | sort -u | xargs || true)

                if [ -z "$ALL_PIDS" ]; then
                    echo "Ports $APP_PORT and 5433 are confirmed free."
                    break
                else
                    echo "Ports still in use by PIDs: $ALL_PIDS."
                    for pid in $ALL_PIDS; do
                        if [[ "$pid" =~ ^[0-9]+$ ]]; then
                            echo "Details for PID $pid:"
                            ps -p "$pid" -o pid,ppid,cmd || true
                            echo "Parent process details for PID $pid:"
                            ps -p $(ps -p "$pid" -o ppid= | xargs) -o pid,ppid,cmd || true    
                            echo "Killing PID $pid..."
                            sudo kill -9 "$pid" || true
                        else
                            echo "Skipping non-numeric PID: '$pid'"
                        fi
                    done
                    sleep "$PORT_CHECK_INTERVAL"
                    PORT_CLEANUP_ATTEMPTS=$((PORT_CLEANUP_ATTEMPTS + 1))
                fi
            done

            if [ "$PORT_CLEANUP_ATTEMPTS" -eq "$MAX_PORT_CLEANUP_ATTEMPTS" ]; then
                echo "ERROR: Ports $APP_PORT or 5433 are still in use after $MAX_PORT_CLEANUP_ATTEMPTS attempts." >&2
                echo "Current docker ps -a output:" >&2
                docker ps -a >&2
                echo "Current docker network ls output:" >&2
                docker network ls >&2
                echo "Checking for TIME_WAIT or CLOSE_WAIT sockets:" >&2
                sudo netstat -tan | grep ":($APP_PORT|5433)\b" >&2
                exit 1
            fi
            echo "--- Advanced Port Cleanup Complete ---"

            # 5. Wait for sockets to clear
            echo "Waiting for sockets to clear on ports $APP_PORT and 5433..."
            for i in {1..15}; do
                if ! sudo netstat -tan | grep -E ":($APP_PORT|5433)\b" > /dev/null; then
                    echo "Sockets cleared."
                    break
                fi
                echo "Sockets still in use (attempt $i/15):"
                sudo netstat -tan | grep -E ":($APP_PORT|5433)\b"
                sleep 5
            done

            # 6. Final verification before deployment
            echo "Final verification: Ensuring ports $APP_PORT and 5433 are free..."
            if sudo netstat -tulnp | grep -E ":($APP_PORT|5433)\b" > /dev/null; then
                echo "ERROR: Ports $APP_PORT or 5433 are still in use. Aborting deployment." >&2
                echo "Processes from ss:" >&2
                sudo ss -tulpn | grep -E ":($APP_PORT|5433)\b" || true >&2
                echo "Processes from lsof:" >&2
                sudo lsof -i :$APP_PORT -i :5433 || true >&2
                echo "Current docker ps -a output:" >&2
                docker ps -a >&2
                exit 1
            fi
            echo "Ports $APP_PORT and 5433 are free. Proceeding with deployment."

            # 7. Update application repository
            echo "Updating application repository on VPS..."
            if [ ! -d "$APP_DIR" ]; then
                git clone https://github.com/AmanYize/express-demo "$APP_DIR"
            fi
            cd "$APP_DIR"
            git reset --hard
            git clean -fd
            git pull origin master
            echo "Application repository updated on VPS."

            # 8. Login to local registry
            echo "Logging into local registry on VPS for push..."
            for attempt in {1..5}; do
              if echo "${{ secrets.DOCKER_PASSWORD }}" | docker login 37.27.196.138:5000 -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin; then
                echo "Docker login to registry succeeded."
                break
              else
                echo "Docker login failed on attempt $attempt. Checking registry status..." >&2
                docker ps -a --filter "name=registry-registry-1"
                docker logs registry-registry-1 || true
                sudo netstat -tulnp | grep ":5000\b" || true
                # Attempt to restart registry
                cd /root/registry
                docker compose -f docker-compose.yml up -d || true
                sleep 10
              fi
            done || { echo "Docker login to registry failed after multiple attempts!" >&2
                      echo "Current docker ps -a output:" >&2
                      docker ps -a >&2
                      exit 1; }
            echo "Logged into local registry on VPS."

            # 9. Build Docker image
            echo "Building Docker image natively on VPS..."
            docker build \
              --build-arg NODE_VERSION=${{ secrets.NODE_VERSION }} \
              -t "${LOCAL_REGISTRY_IMAGE}:${APP_BUILD_TAG}" \
              -t "${LOCAL_REGISTRY_IMAGE}:latest" \
              . || { echo "Docker image build on VPS failed!"; exit 1; }
            echo "Docker image built on VPS successfully."

            # 10. Push to local registry
            echo "Pushing newly built image to local registry from VPS..."
            docker push "${LOCAL_REGISTRY_IMAGE}:${APP_BUILD_TAG}" || { echo "Docker image push to local registry failed!"; exit 1; }
            docker push "${LOCAL_REGISTRY_IMAGE}:latest" || { echo "Docker image latest tag push failed!"; exit 1; }
            echo "Image pushed to local registry."

            # 11. Set environment variables for docker-compose
            export APP_VERSION=${{ github.sha }}
            export APP_PORT=${{ secrets.APP_PORT }}
            export POSTGRES_VERSION=${{ secrets.POSTGRES_VERSION }}
            export POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}

            # 12. Configure firewall
            echo "Configuring firewall for application ports..."
            sudo ufw allow ${APP_PORT}
            sudo ufw allow 5433
            echo "Firewall configured."

            # 13. Deploy with docker-compose
            echo "Deploying new application version with docker-compose..."
            for attempt in {1..5}; do
                cd "$APP_DIR"
                docker compose -p "$PROJECT_NAME" -f docker-compose.yml pull || true
                echo "Waiting 30 seconds before starting containers to ensure port release..."
                sleep 30
                # Check ports again before starting
                if sudo netstat -tulnp | grep -E ":($APP_PORT|5433)\b" > /dev/null; then
                    echo "ERROR: Ports $APP_PORT or 5433 are still in use before attempt $attempt." >&2
                    echo "Current docker ps -a output:" >&2
                    docker ps -a >&2
                    echo "Processes from ss:" >&2
                    sudo ss -tulpn | grep -E ":($APP_PORT|5433)\b" || true >&2
                    echo "Processes from lsof:" >&2
                    sudo lsof -i :$APP_PORT -i :5433 || true >&2
                    exit 1
                fi
                docker compose -p "$PROJECT_NAME" -f docker-compose.yml up -d && break
                echo "Deployment attempt $attempt failed, retrying..." >&2
                # Cleanup before retry
                docker ps -a -q --filter "port=$APP_PORT" | xargs -r docker stop || true
                docker ps -a -q --filter "port=$APP_PORT" | xargs -r docker rm -f || true
                docker ps -a -q --filter "port=5433" | xargs -r docker stop || true
                docker ps -a -q --filter "port=5433" | xargs -r docker rm -f || true
                sleep 15
            done || { echo "Application deployment failed after multiple attempts!" >&2
                      echo "Current docker ps -a output:" >&2
                      docker ps -a >&2
                      exit 1; }
            echo "Application deployed successfully."

            # 14. Verify application health
            echo "--- Starting Application Verification ---"
            sleep 15
            if ! curl -s http://localhost:${APP_PORT}/health | grep -q "ok"; then
                echo "Deployment failed health check. Rolling back..." >&2
                PREV_VERSION=$(cat /root/previous_version.txt || echo "")
                if [ -n "$PREV_VERSION" ]; then
                    export APP_VERSION="$PREV_VERSION"
                    echo "Attempting to roll back to ${LOCAL_REGISTRY_IMAGE}:$PREV_VERSION"
                    cd "$APP_DIR"
                    docker compose -p "$PROJECT_NAME" -f docker-compose.yml pull || { echo "Failed to pull previous app image!"; exit 1; }
                    docker compose -p "$PROJECT_NAME" -f docker-compose.yml up -d || { echo "Failed to deploy previous version!"; exit 1; }
                    echo "Rolled back to $PREV_VERSION"
                    exit 1
                else
                    echo "No previous version available for rollback. Manual intervention required." >&2
                    exit 1
                fi
            fi
            echo "--- Application Verification Successful ---"

            # 15. Post-deployment cleanup
            echo "--- Starting Post-Deployment Cleanup ---"
            docker images "${LOCAL_REGISTRY_IMAGE}" --format '{{.Tag}}' | sort -r | tail -n +6 | xargs -r -I {} docker rmi "${LOCAL_REGISTRY_IMAGE}":{} || true
            echo "Old Docker application images cleaned up."

            echo "${{ github.sha }}" > /root/previous_version.txt
            echo "Current version (${{ github.sha }}) saved for future rollback."
            echo "--- Post-Deployment Cleanup Complete ---"