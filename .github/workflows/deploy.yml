name: Build, Test, and Deploy Node.js Express Demo

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      - name: Fix mocha permissions
        run: chmod +x ./node_modules/.bin/mocha

      - name: Run tests
        run: npm test

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: test-results/*.xml

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: SSH into VPS and deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          password: ${{ secrets.VPS_PASSWORD }}
          script: |
            # Install dependencies
            sudo apt update
            sudo apt remove -y containerd containerd.io
            sudo apt install -y -f
            sudo apt install -y curl git docker.io docker-compose
            sudo systemctl enable docker
            sudo systemctl start docker

            # Clean up old registry containers (if any)
            docker ps -a | grep registry | awk '{print $1}' | xargs -r docker rm -f || true

            # Clone or update repository
            cd /root/your-app-folder || mkdir -p /root/your-app-folder && cd /root/your-app-folder
            if [ -d ".git" ]; then
              git reset --hard
              git clean -fd
              git pull origin master
            else
              git clone https://github.com/${{ github.repository }} .
            fi

            # Build Docker image with retries
            for attempt in {1..3}; do
              docker build \
                --build-arg NODE_VERSION=${{ secrets.NODE_VERSION }} \
                -t myapp:${{ github.sha }} . && break
              echo "Build attempt $attempt failed, retrying..." >&2
              sleep 5
            done

            # Configure firewall
            sudo ufw allow ${{ secrets.APP_PORT }}
            sudo ufw allow 5433

            # Stop and remove old containers
            docker compose -f docker-compose.yml down || true

            # Deploy new version with retries
            export APP_VERSION=${{ github.sha }}
            export APP_PORT=${{ secrets.APP_PORT }}
            export POSTGRES_VERSION=${{ secrets.POSTGRES_VERSION }}
            export POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            for attempt in {1..3}; do
              docker compose -f docker-compose.yml up -d && break
              echo "Deploy attempt $attempt failed, retrying..." >&2
              sleep 5
            done

            # Verify deployment
            sleep 10
            if ! curl -s http://localhost:${{ secrets.APP_PORT }}/health | grep -q "ok"; then
              echo "Deployment failed health check. Rolling back..." >&2
              PREV_VERSION=$(cat /root/previous_version.txt || echo "")
              if [ -n "$PREV_VERSION" ]; then
                export APP_VERSION=$PREV_VERSION
                docker compose -f docker-compose.yml up -d
                echo "Rolled back to $PREV_VERSION"
                exit 1
              else
                echo "No previous version available for rollback" >&2
                exit 1
              fi
            fi

            # Clean up old images (keep last 5)
            docker images myapp --format '{{.Tag}}' | sort -r | tail -n +6 | xargs -r -I {} docker rmi myapp:{} || true

            # Save current version for future rollback
            echo "${{ github.sha }}" > /root/previous_version.txt
