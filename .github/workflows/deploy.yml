name: Build, Test, and Deploy Node.js Express Demo

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      - name: Fix mocha permissions
        run: chmod +x ./node_modules/.bin/mocha

      - name: Run tests
        run: npm test

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: test-results/*.xml

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      - name: Build app
        run: npm run build || true

      - name: Configure Docker for insecure registry
        run: |
          echo '{"insecure-registries": ["37.27.196.138:5000"]}' | sudo tee /etc/docker/daemon.json
          sudo systemctl restart docker

      - name: Log in to Docker registry
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          echo "$DOCKER_PASSWORD" | docker login 37.27.196.138:5000 -u "$DOCKER_USERNAME" --password-stdin

      - name: Build Docker image
        run: |
          docker build \
            --build-arg NODE_VERSION=${{ secrets.NODE_VERSION }} \
            -t 37.27.196.138:5000/myapp:${{ github.sha }} .

      - name: Push Docker image to registry
        run: |
          echo "Pushing image to 37.27.196.138:5000"
          docker push 37.27.196.138:5000/myapp:${{ github.sha }}

      - name: SSH into VPS and deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          password: ${{ secrets.VPS_PASSWORD }}
          script: |
            # Install dependencies
            sudo apt update
            sudo apt install -y curl git docker.io docker-compose

            # Enable and start Docker
            sudo systemctl enable docker
            sudo systemctl start docker

            # Configure insecure registry
            echo '{"insecure-registries": ["37.27.196.138:5000"]}' | sudo tee /etc/docker/daemon.json
            sudo systemctl restart docker

            # Clean up old registry containers
            docker ps -a | grep registry | awk '{print $1}' | xargs -r docker rm -f || true

            # Deploy registry
            mkdir -p /root/registry/auth
            cat << EOF > /root/registry/docker-compose.yml
            version: '3.8'
            services:
              registry:
                image: registry:2
                ports:
                  - "5000:5000"
                environment:
                  - REGISTRY_HTTP_ADDR=0.0.0.0:5000
                  - REGISTRY_HTTP_TLS_ENABLED=false
                  - REGISTRY_AUTH=htpasswd
                  - REGISTRY_AUTH_HTPASSWD_REALM=Registry Realm
                  - REGISTRY_AUTH_HTPASSWD_PATH=/auth/htpasswd
                volumes:
                  - registry-data:/var/lib/registry
                  - /root/registry/auth:/auth
                restart: always
            volumes:
              registry-data:
            EOF

            # Create htpasswd for registry authentication
            docker run --entrypoint htpasswd httpd:2 -Bbn "${{ secrets.DOCKER_USERNAME }}" "${{ secrets.DOCKER_PASSWORD }}" > /root/registry/auth/htpasswd

            # Start registry with retries
            docker compose -f /root/registry/docker-compose.yml down || true
            for attempt in {1..3}; do
              docker compose -f /root/registry/docker-compose.yml up -d && break
              echo "Registry start attempt $attempt failed, retrying..." >&2
              sleep 5
            done

            # Verify registry is running
            if ! curl -s http://localhost:5000/v2/ | grep -q '{}'; then
              echo "Registry failed to start on HTTP" >&2
              exit 1
            fi

            # Log in to registry
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login 37.27.196.138:5000 -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

            # Create application docker-compose.yml
            cat << EOF > /root/docker-compose.yml
            version: '3.8'
            services:
              app:
                image: 37.27.196.138:5000/myapp:${{ github.sha }}
                ports:
                  - "${{ secrets.APP_PORT }}:3000"
                environment:
                  - POSTGRES_HOST=postgres
                  - POSTGRES_DB=mydb
                  - POSTGRES_USER=postgres
                  - POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
                depends_on:
                  postgres:
                    condition: service_healthy
                restart: always
                healthcheck:
                  test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
                  interval: 30s
                  timeout: 3s
                  retries: 3
                  start_period: 10s
              postgres:
                image: postgres:${{ secrets.POSTGRES_VERSION }}
                environment:
                  - POSTGRES_DB=mydb
                  - POSTGRES_USER=postgres
                  - POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
                ports:
                  - "5433:5432"
                volumes:
                  - postgres_data:/var/lib/postgresql/data
                restart: always
                healthcheck:
                  test: ["CMD-SHELL", "pg_isready -U postgres"]
                  interval: 10s
                  timeout: 5s
                  retries: 5
                  start_period: 10s
            volumes:
              postgres_data:
            EOF

            # Configure firewall
            sudo ufw allow 5000
            sudo ufw allow ${{ secrets.APP_PORT }}
            sudo ufw allow 5433

            # Pull image
            docker pull 37.27.196.138:5000/myapp:${{ github.sha }} || true

            # Stop and remove old containers
            docker compose -f /root/docker-compose.yml down || true

            # Deploy new version
            if ! docker compose -f /root/docker-compose.yml up -d; then
              echo "Deployment failed. Rolling back..." >&2
              PREV_VERSION=$(cat /root/previous_version.txt || echo "")
              if [ -n "$PREV_VERSION" ]; then
                export APP_VERSION=$PREV_VERSION
                sed -i "s|37.27.196.138:5000/myapp:.*|37.27.196.138:5000/myapp:$APP_VERSION|" /root/docker-compose.yml
                docker compose -f /root/docker-compose.yml up -d
                echo "Rolled back to $PREV_VERSION"
                exit 1
              else
                echo "No previous version available for rollback" >&2
                exit 1
              fi
            fi

            # Clean up old images (keep last 5)
            docker images 37.27.196.138:5000/myapp --format '{{.Tag}}' | sort -r | tail -n +6 | xargs -r -I {} docker rmi 37.27.196.138:5000/myapp:{} || true

            # Save current version for future rollback
            echo "${{ github.sha }}" > /root/previous_version.txt
