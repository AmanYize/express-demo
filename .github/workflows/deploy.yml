name: Build, Test, and Deploy Node.js Express Demo

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      - name: Fix mocha permissions
        run: chmod +x ./node_modules/.bin/mocha

      - name: Run tests
        run: npm npm test

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: test-results/*.xml

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: SSH into VPS and deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          password: ${{ secrets.VPS_PASSWORD }}
          script: |
            # --- System Setup and Aggressive Cleanup ---
            echo "--- Starting System Setup and Cleanup ---"
            sudo apt update
            # Ensure Docker and Docker Compose are installed and running
            sudo apt install -y curl git docker.io docker-compose
            sudo systemctl enable docker
            sudo systemctl start docker

            # Aggressive cleanup of ALL containers and networks for the project
            APP_DIR="/root/express-demo"
            PROJECT_NAME="express-demo" # Derived from your repository's root directory name

            echo "Attempting to stop and remove all existing containers and networks for project: $PROJECT_NAME"
            cd /root # Ensure we are not inside the app directory when running general docker commands
            if [ -f "$APP_DIR/docker-compose.yml" ]; then
                docker compose -p $PROJECT_NAME -f "$APP_DIR/docker-compose.yml" down --remove-orphans || true
            fi
            docker rm -f $(docker ps -a -q --filter "ancestor=localhost:5000/myapp" --filter "status=exited") || true
            docker rm -f $(docker ps -a -q --filter "ancestor=postgres" --filter "status=exited") || true
            docker rm -f $(docker ps -a -q --filter "name=^${PROJECT_NAME}" -q) || true

            # Remove any potentially orphaned docker-proxy processes holding the port
            echo "Checking and attempting to kill any process still holding port 5433..."
            LSOF_PIDS=$(sudo lsof -t -i :5433 || true)
            if [ -n "$LSOF_PIDS" ]; then
                echo "Found processes on port 5433: $LSOF_PIDS. Attempting to kill them..."
                sudo kill -9 $LSOF_PIDS || true
                sleep 5
            else
                echo "No processes found on port 5433."
            fi

            docker ps -a | grep registry | awk '{print $1}' | xargs -r docker rm -f || true

            echo "--- Cleanup Complete ---"

            # --- Repository Management ---
            echo "--- Starting Repository Management ---"
            if [ ! -d "$APP_DIR" ]; then
              git clone https://github.com/${{ github.repository }} $APP_DIR
            fi
            cd $APP_DIR
            git reset --hard
            git clean -fd
            git pull origin master
            echo "--- Repository Management Complete ---"

            # --- Docker Build and Push to Local Registry ---
            echo "--- Starting Docker Build and Push to Local Registry ---"
            # Define your local registry address
            LOCAL_REGISTRY_ADDRESS="localhost:5000" # <--- IMPORTANT: Confirm your local registry address here
            DOCKER_IMAGE_NAME="$LOCAL_REGISTRY_ADDRESS/myapp"
            APP_BUILD_TAG="${{ github.sha }}"

            # No docker login needed if it's an insecure, unauthenticated local registry
            # If your local registry requires authentication, you'd add 'docker login $LOCAL_REGISTRY_ADDRESS' here
            # with appropriate credentials (e.g., from secrets, if it's a private registry like Harbor)

            for attempt in {1..3}; do
              echo "Build attempt $attempt for $DOCKER_IMAGE_NAME:$APP_BUILD_TAG..."
              docker build \
                --build-arg NODE_VERSION=${{ secrets.NODE_VERSION }} \
                -t $LOCAL_REGISTRY_ADDRESS/myapp:$APP_BUILD_TAG . && break # Tag directly with local registry
              echo "Build attempt $attempt failed, retrying..." >&2
              sleep 10
            done || { echo "Docker build failed after multiple attempts!"; exit 1; }
            echo "Docker build successful."

            echo "Pushing image $DOCKER_IMAGE_NAME:$APP_BUILD_TAG to local registry..."
            docker push $DOCKER_IMAGE_NAME:$APP_BUILD_TAG || { echo "Docker push to local registry failed! Check registry status and Docker daemon config for insecure-registries."; exit 1; }
            echo "Image pushed successfully to local registry."
            echo "--- Docker Build and Push Complete ---"

            # --- Firewall Configuration ---
            echo "--- Configuring Firewall ---"
            sudo ufw allow ${{ secrets.APP_PORT }}
            sudo ufw allow 5433
            # If your local registry runs on the VPS and needs external access, also allow its port (e.g., 5000)
            # sudo ufw allow 5000
            echo "--- Firewall Configuration Complete ---"

            # --- Deployment ---
            echo "--- Starting Deployment ---"
            export APP_VERSION=$APP_BUILD_TAG
            export APP_PORT=${{ secrets.APP_PORT }}
            export POSTGRES_VERSION=${{ secrets.POSTGRES_VERSION }}
            export POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            # No DOCKER_USERNAME needed for docker-compose if using explicit local registry image tag

            for attempt in {1..3}; do
              echo "Deploy attempt $attempt for $PROJECT_NAME..."
              docker compose -p $PROJECT_NAME -f docker-compose.yml up -d && break
              echo "Deploy attempt $attempt failed, retrying..." >&2
              sleep 15
            done || { echo "Deployment failed after multiple attempts!"; exit 1; }
            echo "--- Deployment Complete ---"

            # --- Verification and Rollback ---
            echo "--- Starting Verification ---"
            sleep 10
            if ! curl -s http://localhost:${{ secrets.APP_PORT }}/health | grep -q "ok"; then
              echo "Deployment failed health check. Rolling back..." >&2
              PREV_VERSION=$(cat /root/previous_version.txt || echo "")
              if [ -n "$PREV_VERSION" ]; then
                export APP_VERSION=$PREV_VERSION
                # No DOCKER_USERNAME needed for pull if using explicit local registry image tag
                echo "Attempting to pull and roll back to $DOCKER_IMAGE_NAME:$PREV_VERSION from local registry"
                docker compose -p $PROJECT_NAME -f docker-compose.yml pull app || { echo "Failed to pull previous app image for rollback from local registry!"; exit 1; }
                docker compose -p $PROJECT_NAME -f docker-compose.yml up -d || { echo "Failed to deploy previous version during rollback!"; exit 1; }
                echo "Rolled back to $PREV_VERSION"
                exit 1
              else
                echo "No previous version available for rollback. Manual intervention required." >&2
                exit 1
              fi
            fi
            echo "--- Verification Successful ---"

            # --- Post-Deployment Cleanup ---
            echo "--- Starting Post-Deployment Cleanup ---"
            # Clean up old images (keep last 5). Use the full local registry image name.
            docker images $DOCKER_IMAGE_NAME --format '{{.Tag}}' | sort -r | tail -n +6 | xargs -r -I {} docker rmi $DOCKER_IMAGE_NAME:{} || true
            echo "Old Docker images cleaned up."

            echo "$APP_BUILD_TAG" > /root/previous_version.txt
            echo "Current version ($APP_BUILD_TAG) saved for future rollback."
            echo "--- Post-Deployment Cleanup Complete ---"