name: Build, Test, and Deploy Node.js Express Demo

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      - name: Fix mocha permissions
        run: chmod +x ./node_modules/.bin/mocha

      - name: Run tests
        run: npm test

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: test-results/*.xml

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      - name: Build app
        run: npm run build || true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Registry
        if: ${{ secrets.REGISTRY_USER && secrets.REGISTRY_PASSWORD }}
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.REGISTRY_HOST }}
          username: ${{ secrets.REGISTRY_USER }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Build and Push Docker Image
        run: |
          docker build --build-arg NODE_VERSION=${{ secrets.NODE_VERSION }} -t ${{ secrets.REGISTRY_HOST }}/myapp:${{ github.sha }} .
          docker push ${{ secrets.REGISTRY_HOST }}/myapp:${{ github.sha }}

      - name: SSH into VPS and deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          password: ${{ secrets.VPS_PASSWORD }}
          script: |
            # Export environment variables first
            export REGISTRY_HOST="${{ secrets.REGISTRY_HOST }}"
            export APP_VERSION="${{ github.sha }}"
            export APP_PORT="${{ secrets.APP_PORT }}"
            export POSTGRES_VERSION="${{ secrets.POSTGRES_VERSION }}"
            export POSTGRES_PASSWORD="${{ secrets.POSTGRES_PASSWORD }}"

            # Write docker-compose.yml with expanded variables
            cat << EOF > /root/docker-compose.yml
            version: '3.8'
            services:
              app:
                image: ${REGISTRY_HOST}/myapp:${APP_VERSION}
                ports:
                  - "${APP_PORT}:3000"
                environment:
                  - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
                depends_on:
                  - postgres
                restart: always
                healthcheck:
                  test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
                  interval: 30s
                  timeout: 3s
              postgres:
                image: postgres:${POSTGRES_VERSION}
                environment:
                  - POSTGRES_DB=mydb
                  - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
                ports:
                  - "5433:5432"
                restart: always
                volumes:
                  - postgres_data:/var/lib/postgresql/data
            volumes:
              postgres_data:
            EOF

            # Pull the new app image
            if ! docker pull ${REGISTRY_HOST}/myapp:${APP_VERSION}; then
              echo "Failed to pull new image" >&2
              exit 1
            fi

            # Stop and remove old containers (ignore errors)
            docker compose -f /root/docker-compose.yml down || true

            # Deploy new version
            if ! docker compose -f /root/docker-compose.yml up -d; then
              echo "Deployment failed, rolling back" >&2
              if [ -n "${{ secrets.PREVIOUS_APP_VERSION }}" ]; then
                export APP_VERSION="${{ secrets.PREVIOUS_APP_VERSION }}"
                docker compose -f /root/docker-compose.yml up -d
                echo "Rolled back to ${APP_VERSION}" >&2
                exit 1
              else
                echo "No previous version for rollback" >&2
                exit 1
              fi
            fi

            # Clean up old images (keep last 5)
            docker images ${REGISTRY_HOST}/myapp --format '{{.Tag}}' | sort -r | tail -n +6 | xargs -r -I {} docker rmi ${REGISTRY_HOST}/myapp:{} || true

            # Update previous version record
            echo "${APP_VERSION}" > /root/previous_version.txt
