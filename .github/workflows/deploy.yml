name: Build, Test, and Deploy Node.js Express Demo

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  test:
    runs-on: ubuntu-latest # This job runs on the default AMD64 runner
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      - name: Fix mocha permissions
        run: chmod +x ./node_modules/.bin/mocha

      - name: Run tests
        run: npm test

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: test-results/*.xml

  deploy-registry:
    needs: test
    runs-on: ubuntu-latest # This job runs on the default AMD64 runner
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    steps:
      - name: SSH into VPS and deploy registry
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          password: ${{ secrets.VPS_PASSWORD }}
          script: |
            echo "--- Starting Registry Deployment Setup ---"
            # Ensure necessary tools are installed
            sudo apt update
            sudo apt install -y curl git docker.io docker-compose net-tools lsof

            # Enable and start Docker
            sudo systemctl enable docker
            sudo systemctl start docker

            # Configure insecure registry
            echo '{"insecure-registries": ["37.27.196.138:5000"]}' | sudo tee /etc/docker/daemon.json
            sudo systemctl restart docker
            echo "Docker daemon configured for insecure registry and restarted."

            # Define registry path
            REGISTRY_DIR="/root/registry"
            REGISTRY_COMPOSE_FILE="$REGISTRY_DIR/docker-compose.yml"
            REGISTRY_AUTH_DIR="$REGISTRY_DIR/auth"
            REGISTRY_IP="37.27.196.138"

            # Ensure registry directory and auth directory exist
            mkdir -p "$REGISTRY_AUTH_DIR"

            # Generate registry docker-compose.yml
            cat << EOF > "$REGISTRY_COMPOSE_FILE"
            version: '3.8'
            services:
              registry:
                image: registry:2
                ports:
                  - "5000:5000"
                environment:
                  - REGISTRY_HTTP_ADDR=0.0.0.0:5000
                  - REGISTRY_HTTP_TLS_ENABLED=false
                  - REGISTRY_AUTH=htpasswd
                  - REGISTRY_AUTH_HTPASSWD_REALM=Registry Realm
                  - REGISTRY_AUTH_HTPASSWD_PATH=/auth/htpasswd
                volumes:
                  - registry-data:/var/lib/registry
                  - $REGISTRY_AUTH_DIR:/auth
                restart: always
            volumes:
              registry-data:
            EOF
            echo "Registry docker-compose.yml created."

            # Create htpasswd for registry authentication
            docker run --entrypoint htpasswd httpd:2 -Bbn "${{ secrets.DOCKER_USERNAME }}" "${{ secrets.DOCKER_PASSWORD }}" > "$REGISTRY_AUTH_DIR/htpasswd"
            echo "htpasswd file created for registry authentication."

            # Stop and remove old registry containers before starting a new one
            docker compose -f "$REGISTRY_COMPOSE_FILE" down || true
            echo "Previous registry containers stopped and removed."

            echo "Starting registry..."
            for attempt in {1..3}; do
              docker compose -f "$REGISTRY_COMPOSE_FILE" up -d
              if docker ps --filter "ancestor=registry:2" --filter "status=running" | grep -q "registry"; then
                echo "Registry container appears to be running."
                break
              else
                echo "Registry container not running after 'up' command. Checking logs for details..." >&2
                docker logs $(docker ps -a --filter "ancestor=registry:2" -q --latest) || true
              fi
              echo "Registry start attempt $attempt failed, retrying..." >&2
              sleep 5
            done || { echo "Registry failed to start after multiple attempts!"; exit 1; }
            echo "Registry started successfully."

            echo "Verifying registry health using localhost:5000 with authentication..."
            if ! curl -s -u "${{ secrets.DOCKER_USERNAME }}:${{ secrets.DOCKER_PASSWORD }}" http://localhost:5000/v2/ | grep -q '{}'; then
              echo "Registry failed health check on HTTP at localhost:5000" >&2
              echo "Current docker ps output:" >&2
              docker ps -a >&2
              echo "Current docker logs for registry:" >&2
              docker logs $(docker ps -a --filter "ancestor=registry:2" -q --latest) >&2
              exit 1
            fi
            echo "Registry health check passed."

            sudo ufw allow 5000
            echo "Firewall configured to allow port 5000."
            echo "--- Registry Deployment Complete ---"

  build-and-deploy:
    needs: deploy-registry
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    steps:
      - name: Checkout code (on GitHub Actions Runner)
        uses: actions/checkout@v3

      - name: SSH into VPS, Build, and Deploy application
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          password: ${{ secrets.VPS_PASSWORD }}
          script: |
            echo "--- Starting Application Deployment on VPS ---"
            APP_DIR="/root/express-demo"
            PROJECT_NAME="express-demo"
            LOCAL_REGISTRY_IMAGE="37.27.196.138:5000/myapp"
            APP_BUILD_TAG="${{ github.sha }}"

            # Ensure necessary tools are installed for robust port checking
            sudo apt update && sudo apt install -y net-tools lsof || true # `|| true` to prevent failure if already installed

            # 1. Aggressive Cleanup of application-related containers and processes
            echo "--- Starting Aggressive Application Cleanup ---"
            cd /root

            echo "Attempting docker compose down for project: $PROJECT_NAME..."
            if [ -d "$APP_DIR" ] && [ -f "$APP_DIR/docker-compose.yml" ]; then
                cd "$APP_DIR"
                docker compose -p "$PROJECT_NAME" -f docker-compose.yml down --timeout 0 --rmi all --volumes --remove-orphans || true
                echo "docker compose down completed for $PROJECT_NAME."
                cd /root
            else
                echo "App directory or docker-compose.yml not found, skipping docker compose down."
            fi

            echo "Force stopping and removing any lingering app or postgres containers..."
            OLD_APP_CONTAINERS=$(docker ps -a -q --filter "ancestor=${LOCAL_REGISTRY_IMAGE}" || true)
            OLD_POSTGRES_CONTAINERS=$(docker ps -a -q --filter "ancestor=postgres" || true)

            if [ -n "$OLD_APP_CONTAINERS" ]; then
                echo "Stopping and removing old app containers: $OLD_APP_CONTAINERS"
                docker stop $OLD_APP_CONTAINERS || true
                docker rm -f $OLD_APP_CONTAINERS || true
            fi
            if [ -n "$OLD_POSTGRES_CONTAINERS" ]; then
                echo "Stopping and removing old postgres containers: $OLD_POSTGRES_CONTAINERS"
                docker stop $OLD_POSTGRES_CONTAINERS || true
                docker rm -f $OLD_POSTGRES_CONTAINERS || true
            fi

            # --- Advanced Port Cleanup Loop ---
            echo "--- Starting Advanced Port Cleanup and Verification for ports ${{ secrets.APP_PORT }} and 5433 ---"
            PORT_CLEANUP_ATTEMPTS=0
            MAX_PORT_CLEANUP_ATTEMPTS=20 # Increased attempts
            PORT_CHECK_INTERVAL=3 # Reduced interval for faster checks

            while [ "$PORT_CLEANUP_ATTEMPTS" -lt "$MAX_PORT_CLEANUP_ATTEMPTS" ]; do
                echo "Attempt $((PORT_CLEANUP_ATTEMPTS + 1)) of $MAX_PORT_CLEANUP_ATTEMPTS: Checking ports ${{ secrets.APP_PORT }} and 5433."
                
                # Find processes holding the ports using netstat (often good for docker-proxy)
                NETSTAT_PIDS=$(sudo netstat -tulnp | grep -E ":(${APP_PORT}|5433)\>" | awk '{print $NF}' | cut -d'/' -f1 | xargs || true)
                
                # Find processes holding the ports using lsof (more general)
                LSOF_PIDS=$(sudo lsof -t -i :${{ secrets.APP_PORT }} -i :5433 | grep -v "^$" | xargs || true) # Get PIDs, filter empty lines

                ALL_PIDS=$(echo "$NETSTAT_PIDS $LSOF_PIDS" | tr ' ' '\n' | sort -u | xargs || true) # Combine and get unique PIDs

                if [ -z "$ALL_PIDS" ]; then
                    echo "Ports ${{ secrets.APP_PORT }} and 5433 are confirmed free."
                    break # Ports are free, exit loop
                else
                    echo "Ports still in use by PIDs: $ALL_PIDS. Attempting to kill them..." >&2
                    # Try to kill each PID
                    for pid in $ALL_PIDS; do
                        echo "  Killing PID $pid..." >&2
                        sudo kill -9 "$pid" || true # Force kill
                    done
                    sleep "$PORT_CHECK_INTERVAL" # Wait a bit before next check
                    PORT_CLEANUP_ATTEMPTS=$((PORT_CLEANUP_ATTEMPTS + 1))
                fi
            done

            if [ "$PORT_CLEANUP_ATTEMPTS" -eq "$MAX_PORT_CLEANUP_ATTEMPTS" ]; then
                echo "ERROR: Ports ${{ secrets.APP_PORT }} or 5433 are still in use after multiple aggressive cleanup attempts. Aborting deployment." >&2
                exit 1
            fi
            echo "--- Advanced Port Cleanup Complete. Resuming deployment. ---"
            # --- End Advanced Port Cleanup Loop ---

            echo "Updating application repository on VPS..."
            if [ ! -d "$APP_DIR" ]; then
              git clone https://github.com/${{ github.repository }} "$APP_DIR"
            fi
            cd "$APP_DIR"
            git reset --hard
            git clean -fd
            git pull origin master
            echo "Application repository updated on VPS."

            echo "Logging into local registry on VPS for push..."
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login 37.27.196.138:5000 -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin || { echo "Docker login on VPS failed!"; exit 1; }
            echo "Logged into local registry on VPS."

            echo "Building Docker image natively on VPS..."
            docker build \
              --build-arg NODE_VERSION=${{ secrets.NODE_VERSION }} \
              -t "${LOCAL_REGISTRY_IMAGE}:${APP_BUILD_TAG}" \
              -t "${LOCAL_REGISTRY_IMAGE}:latest" \
              . || { echo "Docker image build on VPS failed!"; exit 1; }
            echo "Docker image built on VPS successfully."

            echo "Pushing newly built image to local registry from VPS..."
            docker push "${LOCAL_REGISTRY_IMAGE}:${APP_BUILD_TAG}" || { echo "Docker image push to local registry failed!"; exit 1; }
            docker push "${LOCAL_REGISTRY_IMAGE}:latest" || { echo "Docker image latest tag push failed!"; exit 1; }
            echo "Image pushed to local registry."

            export APP_VERSION=${{ github.sha }}
            export APP_PORT=${{ secrets.APP_PORT }}
            export POSTGRES_VERSION=${{ secrets.POSTGRES_VERSION }}
            export POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}

            echo "Configuring firewall for application ports..."
            sudo ufw allow ${{ secrets.APP_PORT }}
            sudo ufw allow 5433
            echo "Firewall configured."

            echo "Deploying new application version with docker-compose..."
            for attempt in {1..3}; do
              cd "$APP_DIR"
              docker compose -p "$PROJECT_NAME" -f docker-compose.yml pull || true
              docker compose -p "$PROJECT_NAME" -f docker-compose.yml up -d && break
              echo "Deployment attempt $attempt failed, retrying..." >&2
              sleep 15
            done || { echo "Application deployment failed after multiple attempts!"; exit 1; }
            echo "Application deployed successfully."

            echo "--- Starting Application Verification ---"
            sleep 10
            if ! curl -s http://localhost:${{ secrets.APP_PORT }}/health | grep -q "ok"; then
              echo "Deployment failed health check. Rolling back..." >&2
              PREV_VERSION=$(cat /root/previous_version.txt || echo "")
              if [ -n "$PREV_VERSION" ]; then
                export APP_VERSION="$PREV_VERSION"
                echo "Attempting to pull and roll back to ${LOCAL_REGISTRY_IMAGE}:$PREV_VERSION from local registry"
                cd "$APP_DIR"
                docker compose -p "$PROJECT_NAME" -f docker-compose.yml pull || { echo "Failed to pull previous app image for rollback!"; exit 1; }
                docker compose -p "$PROJECT_NAME" -f docker-compose.yml up -d || { echo "Failed to deploy previous version during rollback!"; exit 1; }
                echo "Rolled back to $PREV_VERSION"
                exit 1
              else
                echo "No previous version available for rollback. Manual intervention required." >&2
                exit 1
              fi
            fi
            echo "--- Application Verification Successful ---"

            echo "--- Starting Post-Deployment Cleanup ---"
            docker images "${LOCAL_REGISTRY_IMAGE}" --format '{{.Tag}}' | sort -r | tail -n +6 | xargs -r -I {} docker rmi "${LOCAL_REGISTRY_IMAGE}":{} || true
            echo "Old Docker application images cleaned up."

            echo "${{ github.sha }}" > /root/previous_version.txt
            echo "Current version (${{ github.sha }}) saved for future rollback."
            echo "--- Post-Deployment Cleanup Complete ---"